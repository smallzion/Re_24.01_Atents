게임 네트워크 프로그래밍

네트워크 기본 용어

 패킷
  - 컴퓨터 네트워크가 전달하는 데이터의 형식화된 블록

 소켓
  - 네트워크 상에서 동작하는 프로세스 간 통신의 종착점

 포트
  - IP 스위트에서 운영체제 통신의 종단점
  - 네트워크 서비스나 특정 프로세스를 식별하는 논리 단위

 네트워크 장치
  - 허브: 여러 컴퓨터와 네트워크 장비를 연결하는 장치
  - 라우터: 컴퓨터 네트워크 간에 데이터 패킷을 전송하는 네트워크 장치
  - 네트워크 스위치: 네트워크와 네트워크를 연결하는 통신 장치
  - 게이트웨이: 네트워크에서 서로 다른 통신망이나 다른 프로토콜을 사용하는 네트워크 간의 통신을 가능하게 하는 기기

 서버-클라이언트 구조
 - 서버: 다른 컴퓨터가 요청하는 회선이나 디스크 장치 등에 대한 접속을 제어하는 관리 소프트웨어나 컴퓨터
 - 클라이언트: 네트워크를 이용해서 서버 시스템에 연결되는 사용자
 - 데이터를 저장하고 관리하는 컴퓨터(서버)와 해당 컴퓨터에 접속하여 데이터를 열람하는(클라이언트)로 구성
 - 1 : N으로 구성되는 매우 효율적인 네트워크 구조. 다수의 사용자들이 공동으로 열람, 복사, 수정, 관리하는 데이터를 한곳에서 관리할 수 있다.
 - MMORPG같은 대규모 플레이어의 상호작용이 필요할 경우 적절하다.
 - 장점: 효율적인 네트워크 구조. 데이터의 유일성과 통일성을 보장할 수 있다
 - 단점: 해킹, 디도스, 랜섬웨어 등등의 공격에 취약 = 각종 보안 제품 설치 + 데이터 백업에 많은 비용이 들어간다.

Peer To Peer(P2P)
 - 중앙이나 센터가 없이 네트워크에 참여하는 모든 참여자가 서로 평등한 네트워크
 - MO게임과 같이 적은 인원이 같이 플레이하며 빠른 액션 처리와 정확한 충돌 처리가 필요한 경우에 적절하다.

하이브리드 P2P
 - 기존의 서버 클라이언트 모델을 완전히 벗어나지 못했다.
 - 중앙 서버가 존재해서 중재 및 검색을 제공

퓨어 P2P
 - 네트워크에 참여하는 모든 컴퓨터는 동일한 수준의 책임을 진다.
 - 장점: 전체 네트워크가 죽는 일이 거의 불가능하다. 네트워크 확장성이 매우 높다. 네트워크 증가에 따른 비용이 제로에 가깝다.
 - 단점: 중앙 서버가 없기 때문에 네트워크를 제어할 방법이 없다. 데이터를 검색할 때 네트워크의 모든 컴퓨터를 검색해야 하기 때문에 부하가 크다. 해킹의 위험이 크다.

Host P2P(슈퍼피어)
 - 한명이 호스트의 역할을 하여 서버의 역할을 하는 방식
 - 하이브리드 P2P와 퓨어 P2P의 장점을 모두 가지고 있다.

프로토콜(Protocol)
 - 컴퓨터 내부 또는 컴퓨터 사이에서 데이터 교환방식을 정의하는 규칙 체계
 - 논리적 구성 요소
	- 프레임(Frame, 자료의 표현 형식 단위) 구성
	- 프레임 안에 있는 각 항목의 뜻과 기능
	- 자료 전송의 절차
 - 물리적 구성 요소
 	- 자료 전송에 쓰이는 전송 매체
	- 접속용 단자 및 전송 신호
	- 회선 규격

HTTP(Hyper Text Transfer Protocol)
 - HTML과 같은 웹문서를 전달하기 위한


IP(Internet Protocol)
 - IP 주소: 네트워크에서 장치들을 구분하고 통신을 하기위해 일종의 주소로 사용하는 번호

IPv4
 - 32bit
 - 8bit 숫자 * 4개
 - 0.0.0.0 ~ 255.255.255.255

IPv6
 - 128bit
 - 16bit 숫자 * 8개
 - 0000:0000:0000:0000:0000:0000:0000:0000 ~ ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff

통신 프로토콜
 - UDP
	신뢰성은 떨어지나 용량이 가볍고 송신 속도가 빠르다.
	스트리밍이나 VoIP 같이 실시간성 보장이 중요한 시스템에서 사용.
 - TCP
	네트워크를 통해 데이터를 안정적이고 순차적으로 에러 없이 교환 가능
	파일 전송이나 이메일전송 같이 안정성이 중요한 시스템에서 사용.
	TCP 3 Way HandShake
	 - TCP/IP 프로토콜을 이용해서 통신을 시작하기 전에 정확한 전송을 보장하기 위해 세션을 수립하는

정보 보안

 정보보안의 핵심 3요소(CIA)
  - 기밀성(Confidentility) : 정보는 인증된 대상만 접근할 수 있어야 한다.
  - 무결성 (integrity) : 정보의 변경은 허가된 사람이 인가된 메커니즘을 통해서만 이루어져야 한다.
  - 가용성 (Avaliablity) : 정보는 필요할 때 언제든지 사용할 수 있어야 한다. ( 정해진 방법대로 처리되었을 때 )

정보보안 서비스
  - CIA(기밀성, 무결성, 가용성)
  - 인증 (Authentication)
	- 컴퓨터 보안에서 허가된 사람이 맞는지 확인하는 시도
	- 인증의 수단 : 지식(비밀번호), 소유(OTP), 신체(지문, 홍채, 정맥 등등)
	- 2단계 인증  (2 step Authentication)
  - 부인 방지
	- 메세지의 송수신이나 교환 후 또는 통신이나 처리가 실행된 후에 
	  그 사실을 사후에 증명함으로써 사실 부인을 방지하는 서비스
공격 기법
 - 세션 하이재킹 : 로그인 된 상태를 가로채 별도의 인증 없이 시스템에 접근하는 공격
	-  DDoS(Distributed Denial of Service)
	 - 서비스 거부 공격의 일종
	 - 악성 코드나 바이러스 등의 악의적인 프로그램을 통해서 많은 수의 일반 사용자 PC를 감염시켜 좀비PC로 만든 다음 한번에 시스템에 서비스를 요청하여 시스템의 가용성을 떨어트려 원래 의도된 용도로 사용하지 못하게 하는 공격이다.

에러 검출
 - 패리티 비트
	- 전송하는 데이터에 1bit를 패리티비트로 설정해 미리 결정해 놓은 홀 짝과 맞을 경우 데이터가 정상적으로 전송된 것으로 간주한다.
 - 체크섬 ( CheckSum )
	- 데이터를 일정 크기로 분리한 다음 그 합계값을 이용해 데이터의 무결성을 보장한다.
 - 해시 함수 ( Hash )
	데이터를 정해진 크기의 유니크한 요약본으로 만들어주는 함수
	- 해시 함수의 요구사항
		- 같은 데이터에 대해서는 항상 같은 결과가 나와야 한다
		- 원본 데이터의 약간의 변화만 있어도 완전히 다른 결과가 나와야 한다.
		- 해시 함수의 결과로 원본 데이터의 복구가 불가능해야 한다.
 - 해시 충돌
	- 서로 다른 입력 값을 넣었음에도 불구하고 같은 출력값이 나온 경우
암호화 용어
	- 평문 (Plain Text): 암호화 되지 않은 데이터
	- 암호문 (Cipher Text): 평문을 암호화 처리해서 다른 사람이 알아보지 못하게 만든 데이터
	- 암호화 (Encryption): 평문을 암호문으로 변경하는 처리
	- 복호화 (Decryption): 암호문을 평문으로 변경하는 처리

암호화 알고리즘
	- 대칭키 알고리즘
		- 데이터를 암호화/복호화 할 때 특정한 키값을 사용하여 암호화하고 복호화할 수 있다.
		- DES, TripleDes, AES
		- 키 배포문제
	- 공개키 알고리즘
		- 암호화에 사용하느 키와 복호화에 사용하는 키가 서로 다르다.
		- 개인키와 공개키
		- 암호화 및 부인방지에 사용된다.

		- 개인키: 본인만 알고 있는 값
		- 공개키: 모두가 알고 있는 키 값

		- RSA: 컴퓨터로 소인수분해가 어렵다는 것에 기반을 둔 공개키 기반의 암호화 알고리즘
			- 암호화, 디지털 서명을 통한 부인방지 제공
			- 대표적인 트랩도어 알고리즘
